<?xml version="1.0" encoding="UTF-8"?>
<xsd:schema xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:tns="http://pagopa-api.pagopa.gov.it/node/nodeForIO.xsd" targetNamespace="http://pagopa-api.pagopa.gov.it/node/nodeForIO.xsd">


  <!--Simple type-->

  <xsd:simpleType name="stText16">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="16" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIBAN">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-zA-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIdPSP">
    <xsd:annotation>
      <xsd:documentation>
PSP Identifier, it has been assigned from pagoPA.

Code used in the primitive web service and in its objects exchanged with the NodoSPC.

The code is generally represented by the **BIC** code (_Bank Identifier Code_) of the PSP.

In the absence of the BIC code, or to handle particular situations, another code can be used, as long as it uniquely identifies the PSP.
            </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="35" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIdBroker">
    <xsd:annotation>
      <xsd:documentation>
Broker Identifier, it has been assigned from pagoPA.

Identification of the intermediary/broker of the PSP that provides the specific access (channel) to the PSP for the service delivery.

_Note_: The intermediary/broker can coincide with the PSP itself

            </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="35" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIdChannel">
    <xsd:annotation>
      <xsd:documentation>
Channel Identifier, it identifies a payment service category and through which the transaction is carried out.

A Channel identifier belongs to only one PSP intermediary/broker and consequently must be unique with respect to the PSP.
            </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="35" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="stText35">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="35" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stText70">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="70" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stText140">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="140" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stText210">
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="210" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIdTransfer">
    <xsd:restriction base="xsd:int">
      <xsd:enumeration value="1" />
      <xsd:enumeration value="2" />
      <xsd:enumeration value="3" />
      <xsd:enumeration value="4" />
      <xsd:enumeration value="5" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stIdempotencyKey">
    <xsd:annotation>
      <xsd:documentation>
`idempotencyKey`, it has been genearated from PSP.

The `activationPaymentNotice` request expects this input parameter,  whose content is a discretion of caller, which makes the call idempotent with respect to the
same value of `idempotencyKey`, i.e. with the same key the platform will respond with the same response.

It's obtained as concatenation of the PSP' fiscal code followed by a `_` and a unique random string within PSP, that generated it

The system won't check the value of the PSP tax number on the DB, but the above criteria are useful for creating and guaranteeing a unique `idempotencyKey`.

            </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9]{11}_[a-zA-Z0-9]{10}" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stPaymentToken">
    <xsd:annotation>
      <xsd:documentation>
It is generated by the system during the payment activation phase, it is the correlation identifier to match activation and payment outcome. 

- **PA OLD**: the PA receives it into `CCP` (_CodiceContestoPagamento_) which uniquely identifies a single payment activity started from PSP.
- **PA NEW**: the PA does not know it, it will receive it as a unique identifier of the receipt.

      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="1" />
      <xsd:maxLength value="35" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="stPassword">
    <xsd:annotation>
      <xsd:documentation>
                channel password, it has been assigned from pagoPA
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:minLength value="8" />
      <xsd:maxLength value="15" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="stExpirationTime">
    <xsd:annotation>
      <xsd:documentation> 
Token expiration time ( ms ), max 30 minute.

The duration of the payment token can be set in 2 ways :

- _Implicitly_ from the **pagoPA** platform, if it isn't set in the request of `activateIOPayment` (default value duration = `30` minutes)

- _Explicitly_ from the **PSP**, if it's set in request to the `activateIOPayment`

      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:integer">
      <xsd:maxInclusive value="1800000" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stEMail">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-zA-Z0-9_\.\+\-]+@[a-zA-Z0-9\-]+(\.[a-zA-Z0-9\-]+)*" />
      <xsd:maxLength value="256" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stAmount">
    <xsd:annotation>
      <xsd:documentation>
Amount of payment in euro
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:decimal">
      <xsd:pattern value="\d+\.\d{2}" />
      <xsd:maxInclusive value="999999999.99" />
    </xsd:restriction>
  </xsd:simpleType>

  <!-- <xsd:simpleType name="stUUID">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[a-f0-9]{8}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{4}-[a-f0-9]{12}" />
    </xsd:restriction>
  </xsd:simpleType> -->

  <xsd:simpleType name="stNoticeNumber">
    <xsd:annotation>
      <xsd:documentation>
`noticeNumber` is composed by :

`[auxDigit][segregationCode][IUVBase][IUVCheckDigit]`
</xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[0-9]{18}" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="stFiscalCodePA">
    <xsd:annotation>
      <xsd:documentation>
Tax code of the public administration to which the payment notification is made out
      </xsd:documentation>
    </xsd:annotation>

    <xsd:restriction base="xsd:string">
      <xsd:length value="11" />
      <xsd:pattern value="[0-9]{11}" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stPaymentMethod">
    <xsd:annotation>
      <xsd:documentation>
Method of the payment , i.e. `cash`, `creditCard`, `bancomat` or `other`
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="cash" />
      <xsd:enumeration value="creditCard" />
      <xsd:enumeration value="bancomat" />
      <xsd:enumeration value="other" />
    </xsd:restriction>
  </xsd:simpleType>


  <xsd:simpleType name="stOutcome">
    <xsd:annotation>
      <xsd:documentation>
The outcome of the operation may contain the following result string code: 

- **OK** : operation performed successfully
- **KO** : operation terminated with error
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="OK" />
      <xsd:enumeration value="KO" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stNazioneProvincia">
    <xsd:restriction base="xsd:string">
      <xsd:pattern value="[A-Z]{2,2}" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stEntityUniqueIdentifierValue">
    <xsd:annotation>
      <xsd:documentation>
Alphanumeric field that can contain the tax code or, alternatively, the VAT number of the payer.

In applicable cases, when it is not possible to identify for tax purposes the subject, the `ANONIMO` value can be used
      </xsd:documentation>
    </xsd:annotation>

    <xsd:restriction base="xsd:string">
      <xsd:minLength value="2" />
      <xsd:maxLength value="16" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stEntityUniqueIdentifierType">
    <xsd:annotation>
      <xsd:documentation>
Alphanumeric field indicating the nature of the subject; it can assume the following values:

- **F** : Natural person
- **G** : Legal Person
      </xsd:documentation>
    </xsd:annotation>

    <xsd:restriction base="xsd:string">
      <xsd:enumeration value="F" /> <!-- Persona Fisica -->
      <xsd:enumeration value="G" /> <!-- Persona Giuridica -->
      <xsd:length value="1" />
    </xsd:restriction>
  </xsd:simpleType>

  <xsd:simpleType name="stISODate">
    <xsd:restriction base="xsd:date" />
  </xsd:simpleType>

  <!--Complex type-->

  <xsd:complexType name="ctEntityUniqueIdentifier">
    <xsd:sequence>
      <xsd:element name="entityUniqueIdentifierType" type="tns:stEntityUniqueIdentifierType" />
      <xsd:element name="entityUniqueIdentifierValue" type="tns:stEntityUniqueIdentifierValue" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ctSubject">
    <xsd:annotation>
      <xsd:documentation>
Contains all data for the subject of payment :

- `uniqueIdentifier` : (_see below to details_)
- `fullName` : name of the subject
- `streetName` : street name
- `civicNumber` : building number
- `postalCode` : postal code
- `city` : town name
- `stateProvinceRegion` : country subdivision
- `country` : country name
- `e-mail` : remittance location electronic address

      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="uniqueIdentifier" type="tns:ctEntityUniqueIdentifier" />
      <xsd:element name="fullName" type="tns:stText70" />
      <xsd:element name="streetName" type="tns:stText70" minOccurs="0" />
      <xsd:element name="civicNumber" type="tns:stText16" minOccurs="0" />
      <xsd:element name="postalCode" type="tns:stText16" minOccurs="0" />
      <xsd:element name="city" type="tns:stText35" minOccurs="0" />
      <xsd:element name="stateProvinceRegion" type="tns:stText35" minOccurs="0" />
      <xsd:element name="country" type="tns:stNazioneProvincia" minOccurs="0" />
      <xsd:element name="e-mail" type="tns:stEMail" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>


  <xsd:complexType name="ctResponse">
    <xsd:sequence>
      <xsd:element name="outcome" type="tns:stOutcome" />
      <xsd:element name="fault" type="tns:ctFaultBean" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:simpleType name="stFaultCode">
    <xsd:annotation>
      <xsd:documentation>
        All fault codes are described
        <a href="https://docs.google.com/spreadsheets/d/15sJplTLu6kWPomW3jbBzZYvD7QyIswERKktFG0bk1IQ/edit?usp=sharing" target="_blank">here</a>
      </xsd:documentation>
    </xsd:annotation>
    <xsd:restriction base="xsd:string"></xsd:restriction>
  </xsd:simpleType>

  <xsd:complexType name="ctFaultBean">
    <xsd:annotation>
      <xsd:documentation>
- `id` : Subject issuing the error.
Allowed values ​​are : 
  - `NodoDeiPagamentiSPC` : constant which identifies the NodoSPC
  - `[domain identifier]` : domain id of the creditor entity issuing the fault
  - `[PSP identifier]` : PSP identifier issuing the fault

- `faultCode` : error code (see `stFaultCode` to details)

- `faultString` : Specification of the error code, specific to the subject issuing it. Contains a more talking description relating to the `faultCode`.

- `description` : Additional description of the error set by the NodoSPC, by the creditor or PSP.

- `serial` : Position of the element in the referenced list. Useful when providing a parameter in the form of a vector (for example, in the primitive `SendCarrelloRPT` node).
If the error is generated by the EC or by the PSP, the data reported is the value of the `faultBean.serial` data set by the EC or by the PSP.

- `originalFaultCode` : Error code generated by the counterpart. (_Set only it isn't generated by NodoSPC._)

- `originalFaultString` : Specification of the error code generated by the counterpart. (_Set only it isn't generated by NodoSPC._)

- `originalDescription` : Additional description of the error generated by the counterparty. (_Set only it isn't generated by NodoSPC._)
      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="faultCode" type="tns:stFaultCode" />
      <xsd:element name="faultString" type="xsd:string" />
      <xsd:element name="id" type="xsd:string" />
      <xsd:element name="description" type="xsd:string" minOccurs="0" />
      <xsd:element name="serial" type="xsd:int" minOccurs="0" />
      <xsd:element name="originalFaultCode" type="xsd:string" minOccurs="0" />
      <xsd:element name="originalFaultString" type="xsd:string" minOccurs="0" />
      <xsd:element name="originalDescription" type="xsd:string" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ctQrCode">
    <xsd:annotation>
      <xsd:documentation>
Payment Notice **QR-CODE** data.
QR-CODE is ISO/IEC 18004:2015 compliant generated with:

Parameters for generating the QR-CODE

- Symbol Version : 4
- Modules : 33x33
- Modules width : 3 pixels
- ECC Level: M ( max correction error 15%)
- Character set : UTF-8

QR-CODE contains a string formatted as :
`PAGOPA|002|noticeNumber|fiscalCode|amount`

Where `noticeNumber` is composed by :

`[auxDigit][segregationCode][IUVBase][IUVCheckDigit]`

While `fiscalCode` is the creditor tax code.
      </xsd:documentation>
    </xsd:annotation>
    <xsd:sequence>
      <xsd:element name="fiscalCode" type="tns:stFiscalCodePA" />
      <xsd:element name="noticeNumber" type="tns:stNoticeNumber" />
    </xsd:sequence>
  </xsd:complexType>

  <!-- Transfer List : activate response -->

  <xsd:complexType name="ctTransferPSP">
    <xsd:sequence>
      <xsd:element name="idTransfer" type="tns:stIdTransfer" />
      <xsd:element name="transferAmount" type="tns:stAmount" />
      <xsd:element name="fiscalCodePA" type="tns:stFiscalCodePA" />
      <xsd:element name="IBAN" type="tns:stIBAN" />
      <xsd:element name="remittanceInformation" type="tns:stText140" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="ctTransferListPSP">
    <xsd:annotation>
      <xsd:documentation>
Structure containing the details of possible tranfer payments.

Currently set at 5 eligible payments per single position.

Where each `transfer` items contains :

- `idTransfer` : index of the list
- `transferAmount` : amount 
- `fiscalCodePA` : Tax code of the public administration
- `IBAN` : contains the IBAN of the account to be credited
- `remittanceInformation` : reason for payment (_alias_ `causaleVersamento`)
      </xsd:documentation>
    </xsd:annotation>

    <xsd:sequence>
      <xsd:element name="transfer" type="tns:ctTransferPSP" maxOccurs="5" />
    </xsd:sequence>
  </xsd:complexType>

  <!--Element req/res-->
  <xsd:complexType name="activateIOPaymentReq">
    <xsd:sequence>
      <xsd:element name="idPSP" type="tns:stIdPSP" />
      <xsd:element name="idBrokerPSP" type="tns:stIdBroker" />
      <xsd:element name="idChannel" type="tns:stIdChannel" />
      <xsd:element name="password" type="tns:stPassword" />
      <xsd:element name="idempotencyKey" type="tns:stIdempotencyKey" minOccurs="0" />
      <xsd:element name="qrCode" type="tns:ctQrCode" />
      <!-- expirationTime related to TOKEN generated by nodoSPC -->
      <!-- expirationTime is set to 30min as default by NodoSPC -->
      <xsd:element name="expirationTime" type="tns:stExpirationTime" minOccurs="0" />
      <!-- required , neeed to importoSingoloVersamento present in to paaAttivaRPT -->
      <xsd:element name="amount" type="tns:stAmount" />
      <!-- Data di scadenza del pagamento -->
      <xsd:element name="dueDate" type="tns:stISODate" minOccurs="0" />
      <xsd:element name="paymentNote" type="tns:stText210" minOccurs="0" />
      <xsd:element name="payer" type="tns:ctSubject" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <xsd:complexType name="activateIOPaymentRes">
    <xsd:complexContent>
      <xsd:extension base="tns:ctResponse">
        <xsd:sequence>
          <xsd:element name="totalAmount" type="tns:stAmount" minOccurs="0" />
          <xsd:element name="paymentDescription" type="tns:stText140" minOccurs="0" /> <!-- TODOPS -->
          <xsd:element name="fiscalCodePA" type="tns:stFiscalCodePA" minOccurs="0" />
          <xsd:element name="companyName" type="tns:stText140" minOccurs="0" />
          <xsd:element name="officeName" type="tns:stText140" minOccurs="0" />
          <!-- <xsd:element name="chargePA" type="tns:stAmount" minOccurs="0" /> -->
          <xsd:element name="paymentToken" type="tns:stPaymentToken" minOccurs="0" />
          <!-- <xsd:element name="transferList" type="tns:ctTransferListPSP" minOccurs="0" /> -->
          <xsd:element name="creditorReferenceId" type="tns:stText35" minOccurs="0" /> <!--IUV -->
        </xsd:sequence>
      </xsd:extension>
    </xsd:complexContent>
  </xsd:complexType>

  <xsd:complexType name="ctHandledException">
    <xsd:sequence>
      <xsd:element name="originalFaultCode" type="xsd:string" minOccurs="0" />
      <xsd:element name="originalFaultString" type="xsd:string" minOccurs="0" />
      <xsd:element name="originalDescription" type="xsd:string" minOccurs="0" />
    </xsd:sequence>
  </xsd:complexType>

  <!-- Wrapper Elements -->
  <xsd:element name="activateIOPaymentReq" type="tns:activateIOPaymentReq" />
  <xsd:element name="activateIOPaymentRes" type="tns:activateIOPaymentRes" />
  <!-- fault messages -->
  <xsd:element name="handledException" type="tns:ctHandledException" />


</xsd:schema>